#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    Jun 24, 2020 06:53:57 AM EDT  platform: Linux

import sys
import os
import tkinter.messagebox
from cryptography.fernet import Fernet
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import decoder_support

def vp_start_gui_decode():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Decoder (root)
    decoder_support.init(root, top)
    root.mainloop()

w = None
def create_Decoder(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Decoder(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Decoder (w)
    decoder_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Decoder():
    global w
    w.destroy()
    w = None

def decode_file():
    if os.path.isfile('info.encrypted') == False:
        tkinter.messagebox.showwarning("file not found","info.encrypted not found")
        pass
    else:
        if os.path.isfile('key.key') == False:
            tkinter.messagebox.showwarning("File Not Found","Key.key File Not Found :-(")
            pass
        else:
            with open('key.key','r') as f:
                keyfile = f.read()
                print(keyfile)
            with open('info.encrypted','r') as f:
                encrypted_file = f.read()
            
            key = Fernet(keyfile)
            print(key)
            decrypted = key.decrypt(encrypted_file.encode())
            if os.path.isfile('info.fahadakash') == False:
                with open("info.fahadakash",'wb') as f:
                    f.write(decrypted)
                tkinter.messagebox.showinfo("complete","Decrypted Completed :-)")
                tkinter.messagebox.showinfo("'File","info Saved in info.fahadakash")
            else:
                filefound = tkinter.messagebox.askquestion("info file found","info.fahadakash file found do you want delete it")
                if filefound == 'yes':
                    os.remove('info.fahadakash')
                    with open("info.fahadakash",'wb') as f:
                        f.write(decrypted)
                        tkinter.messagebox.showinfo("complete","Decrypted Completed")
                        tkinter.messagebox.showinfo("'File","info Saved in info.fahadakash")
                else:
                    pass


class Decoder:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+406+135")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("Decoder")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.183, rely=0.2, relheight=0.433, relwidth=0.592)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(cursor="fleur")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.141, rely=0.103, height=51, width=249)
        self.Label1.configure(text='''Click  the Button to Decode the file''')

        self.decode = tk.Button(self.Frame1)
        self.decode.place(relx=0.338, rely=0.41, height=51, width=131)
        self.decode.configure(text='''Decode''')
        self.decode.configure(command=decode_file)







