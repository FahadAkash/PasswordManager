#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    Jun 24, 2020 06:50:41 AM EDT  platform: Linux

import sys
import os
from cryptography.fernet import Fernet
#import tkMessageBox
import tkinter.messagebox
#key = b'' # Use one of the methods to get a key (it must be the same when decrypting)
key = Fernet.generate_key()
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import unknown_support

def vp_start_gui_encode():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Encoder (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Encoder(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Encoder(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Encoder (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def keysave(key):
    with open('key.key','wb') as f:
        f.write(key)

def encrypt_file(key):
    #keysave(key)
    input_file = 'info.txt'
    output_file = 'info.encrypted'
    if os.path.isfile('info.txt') == True:
        with open(input_file, 'rb') as f:
            data = f.read()
        
    else:
        tkinter.messagebox.showwarning("file not found","info.txt not found")
        sys.exit()

    if os.path.isfile('key.key') == True:
        keyfile = tkinter.messagebox.askquestion("key file ","Key file found do you want use it")
        if keyfile == 'yes':
            with open('key.key' , 'r') as f:
                keymain = f.read()
            fernet = Fernet(keymain)
            encrypted = fernet.encrypt(data)
            with open(output_file , 'wb') as f:
                f.write(encrypted)
                print(key)
            tkinter.messagebox.showinfo("complete","File Complete Encrypted")
            moremessage = tkinter.messagebox.askquestion('info.txt','Do you want to Remove info.txt file')
            if moremessage == 'yes':
                os.remove('info.txt')
            else:
                pass
        else:
            os.system('rm key.key')
            keysave(key)
            fernet = Fernet(key)
            encrypted = fernet.encrypt(data)
            with open(output_file, 'wb') as f:
                f.write(encrypted)
            print(key)
    else:
        keysave(key)
        fernet = Fernet(key)
        encrypted = fernet.encrypt(data)
        with open(output_file, 'wb') as f:
            f.write(encrypted)
        print(key)
        
def encrypt():
    if os.path.isfile('info.encrypted') == True:
        result = tkinter.messagebox.askyesno("info.encrypt","File Found Do You Want Encrypt and remove file ")
        if result == True:
            os.system('rm info.encrypted')
            encrypt_file(key)
            tkinter.messagebox.showinfo("File Encrypted","Complete Encrypted")
            
        else:
            pass
    else:
        encrypt_file(key)
        print("cool")
        tkinter.messagebox.showinfo("File Encrypted","Complete Encrypted")
        

def destroy_Encoder():
    global w
    w.destroy()
    w = None

class Encoder:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+469+122")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("Encoder")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.167, rely=0.178, relheight=0.478
                , relwidth=0.675)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.37, rely=0.605, height=51, width=101)
        self.Button1.configure(text='''Encode''')
        self.Button1.configure(command=encrypt)

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.148, rely=0.186, height=41, width=289)
        self.Label1.configure(text='''Click the Button to Encode the File''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.173, rely=0.326, height=51, width=259)
        self.Label2.configure(text='''this Is a  free Software for Linux''')







